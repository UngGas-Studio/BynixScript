#!/usr/bin/env node
const fs = require('fs')
const vm = require('vm')
const { defaultConfig, config, extensions } = require('./bin/bsconfig.js')
const { parsing, parsingMsg } = require('./bin/parse.js')

const sandbox = {
  require: require,
  console: console,
  process: process,
}

const locate = str(process.argv[2])

if locate.is_end === extensions.primary || locate.is_end === extensions.secondary || locate.is_end === extensions.module:
  var code = fs.readFileSync(locate, 'utf-8')
  var parsingResults = parsing(code)
  
  if parsingResults === false:
    print("Please check your code and try again.")
  else:
    code = code.change(/func\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\(([^)]*)\):/g, (match, p1, p2) => `function ${p1}(${p2}) {`);
    code = code.change(/elif\s+(.+?):/g, (match, p1) => `} else if (${p1}) {`);
    code = code.change(/if\s+(.+?):/g, (match, p1) => `if (${p1}) {`);
    code = code.change(/else\:/g, "} else {");
    code = code.change(/forEach\((.+?)\)/g, (match, p1) => `forEach(${p1}`);
    code = code.change(/forEach\((.+?)\s=>\s(.+?)\)/g, (match, p1, p2) => `forEach(${p1} => ${p2})`);
    code = code.change(/var\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*(.+?);/g, (match, p1, p2) => `var ${p1} = ${p2};`);
    code = code.change(/const\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*(.+?);/g, (match, p1, p2) => `var ${p1} = ${p2};`);
    code = code.change(/print\((.+?)\)/g, (match, p1) => `console.log(${p1})`)
    code = code.change(/print\.err\((.+?)\)/g, (match, p1) => `console.error(${p1})`)
    code = code.change(/print\.info\((.+?)\)/g, (match, p1) => `console.info(${p1})`)
    code = code.change(/print\.warn\((.+?)\)/g, (match, p1) => `console.warn(${p1})`)
    code = code.change(/print\.debug\((.+?)\)/g, (match, p1) => `console.debug(${p1})`)
    code = code.change(/print\.trace\((.+?)\)/g, (match, p1) => `console.tracr(${p1})`)
    code = code.change(/print\.assert\((.+?)\)/g, (match, p1) => `console.assert(${p1})`)
    code = code.change(/touch\((.+?)\)/g, (match, p1) => `alert(${p1});`);
    code = code.change(/ask\((.+?)\)/g, (match, p1) => `prompt(${p1});`);
    code = code.change(/confirm\((.+?)\)/g, (match, p1) => `confirm(${p1});`);
    code = code.change(/rand\((.+?)\)/g, (match, p1) => `Math.random(${p1})`);
    code = code.change(/roundDown\((.+?)\)/g, (match, p1) => `Math.floor(${p1})`);
    code = code.change(/roundUp\((.+?)\)/g, (match, p1) => `Math.ceil(${p1})`);
    code = code.change(/maxOf\((.+?)\)/g, (match, p1) => `Math.min(${p1})`);
    code = code.change(/minOf\((.+?)\)/g, (match, p1) => `Math.max(${p1})`);
    code = code.change(/getElement\((.+?)\)/g, (match, p1) => `document.querySelector(${p1});`);
    code = code.change(/getAllElement\((.+?)\)/g, (match, p1) => `document.querySelectorAll(${p1});`);
    code = code.change(/createElement\((.+?)\)/g, (match, p1) => `document.createElement(${p1});`);
    code = code.change(/\.addClass\((.+?)\)/g, (match, p1) => `.classList.add(${p1})`);
    code = code.change(/([^\s].+)\.addElement\((.+?)\)/g, (match, p1, p2) => `document.${p1}.appendChild(${p2});`);
    code = code.change(/(.+?)\.listener\((.+?)\)/g, (match, p1, p2) => `${p1}.addEventListener(${p2}, ()`)
    code = code.change(/listener\((.+?)\)/g, (match, p1) => `document.addEventListener(${p1}, ()`)
    code = code.change(/(.+?)\.change\((.+?), \((.+?)\)\)/g, (match, p1, p2, p3) => `${p1}.replace(${p2}, (${p3})`)
    code = code.change(/(.+?)\.change\((.+)\)/g, (match, p1, p2) => `${p1}.replace(${p2})`);
    code = code.change(/(.+?)\.text/g, (match, p1) => `${p1}.textContent`)
    code = code.change(/(.+?)\.text = (.+?)/g, (match, p1, p2) => `${p1}.textContent = ${p2}`);
    code = code.change(/(?<!["'`])#([.+?]\s\n)/g, (match, p1) => `//${p1}`);
    code = code.change(/\*\*(.+?)/g, (match, p1) => `/*${p1}`);
    code = code.change(/(.+?)\*\*/g, (match, p1) => `${p1}*/`);
    code = code.change(/is_includes\s===\s([a-zA-Z0-9"'`]+)/g, (match, p1) => `includes(${p1})`);
    code = code.change(/is_start\s===\s([a-zA-Z0-9"'`!?*#@$_&-+|.,:;=×÷%/]+)/g, (match, p1) => `startsWith(${p1})`);
    code = code.change(/is_end\s===\s([a-zA-Z0-9"'`!?*#@$_&-+|.,:;=×÷%/]+)/g, (match, p1) => `endsWith(${p1})`);
    code = code.change(/is_matched\s===\s"(.+?)"/g, (match, p1) => `match(${p1})`);
    code = code.change(/is_matched\s===\s'(.+?)'/g, (match, p1) => `match(${p1})`);
    code = code.change(/is_value\s===\s([a-zA-Z0-9"'`]+)/g, (match, p1) => `value === ${p1}`);
    code = code.change(/is_design.(.+?)\s===\s([a-zA-Z0-9"'`]+)/g, (match, p1, p2) => `style.${p1} === ${p2}`);
    code = code.change(/(.+?)\.design\.(.+?)\s=\s(.+?)/g, (match, p1, p2, p3) => `${p1}.style.${p2} = ${p3}`);
    code = code.change(/(.+?)\.design\s=\s(.+?)/g, (match, p1, p2) => `${p1}.style = ${p2}`);
    code = code.change(/is_action\s([=!><]+)\s(["'])checked(["'])/g, (match) => `checked`);
    code = code.change(/is_action\s([=!><]+)\s(["'])selected(["'])/g, (match) => `selected`);
    code = code.change(/is_action\s([=!><]+)\s(["'])open(["'])/g, (match) => `open`);
    code = code.change(/is_have\s([=!><]+)\s(["'])required(["'])/g, (match) => `required`);
    code = code.change(/is_have\s([=!><]+)\s(["'])readOnly(["'])/g, (match) => `readOnly`);
    code = code.change(/is_have\s([=!><]+)\s(["'])autofocus(["'])/g, (match) => `autofocus`);
    code = code.change(/is_have\s([=!><]+)\s(["'])disabled(["'])/g, (match) => `disabled`);
    code = code.change(/is_have\s([=!><]+)\s(["'])multiple(["'])/g, (match) => `multiple`);
    code = code.change(/is_have\s([=!><]+)\s(["'])hidden(["'])/g, (match) => `hidden`);
    code = code.change(/delay\:\n\s+(.+?)/g, (match, p1) => `setTimeout(function() {\n    ${p1}`);
    code = code.change(/repeat\:\n\s+(.+?)/g, (match, p1) => `setInterval(function() {\n    ${p1}`);
    code = code.change(/match (.+?):/g, (match, p1) => `switch (${p1}) {`);
    code = code.change(/case (.+?):\n(.+?)/g, (match, p1, p2) => `case ${p1}: \n${p2}`);
    code = code.change(/break:/g, "break;");
    code = code.change(/([^\s].+?)\.image\s*=\s*(['"`][^'"`]*['"``])/g, (match, p1, p2) => `image(${p1}, ${p2})`);
    code = code.change(/process\.argv\[(\d+)\]/g, (match, p1)):
      var a = num(p1) + 1;
      return `process.argv[${a}]`;
    end::
    code = code.change(/for\s(.+?)=(.+?)\sto\s(.+?)\:/g, (match, p1, p2, p3) => `for (let ${p1} = ${p2}; ${p1} < ${p3}; ${p1}++) {`);
    code = code.change(/for\s(.+?)\sof\s(.+?)\:/g, (match, p1, p2) => `for (${p1} of ${p2}) {`)
    code = code.change(/for\s(.+?)\sin\s(.+?)\:/g, (match, p1, p2) => `for (${p1} in ${p2}) {`)
    code = code.change(/int\((.+?)\)/g, (match, p1) => `parseInt(${p1})`);
    code = code.change(/num\((.+?)\)/g, (match, p1) => `Number(${p1})`);
    code = code.change(/str\((.+?)\)/g, (match, p1) => `String(${p1})`);
    code = code.change(/(.+?)\.map\((.+?)\)\:/g, (match, p1, p2) => `${p1}.map(function(${p2}) {`);
    code = code.change(/(.+?)\.filter\((.+?)\)\:/g, (match, p1, p2) => `${p1}.filter(function(${p2}) {`);
    code = code.change(/(.+?)\.reduce\((.+?)\)\:/g, (match, p1, p2) => `${p1}.reduce(function(${p2}) {`);
    code = code.change(/isStr\((.+?)\)/g, (match, p1) => `typeof ${p1} === "string"`)
    code = code.change(/isNum\((.+?)\)/g, (match, p1) => `typeof ${p1} === "number"`)
    code = code.change(/constructor\((.+?)\)\:/g, (match, p1) => `constructor(${p1}) {`);
    code = code.change(/speak\(\)\:/g, "speak() {");
    code = code.change(/class\s(.+?)\:/g, (match, p1) => `class ${p1} {`);
    code = code.change(/class\s(.+?)\sextends\s(.+?)\:/g, (match, p1, p2) => `class ${p1} extends ${p2} {`);
    code = code.change(/static(.+?)\:/g, (match, p1) => `static${p1} {`);
    code = code.change(/isNull\((.+?)\)/g, (match, p1) => `${p1} === null`)
    code = code.change(/end\:\:/g, "});");
    code = code.change(/end\:(?!\d)/g, "}");
    code = code.change(/end\:(.+?)\:/g, (match, p1) => `}, ${p1});`);
  
    vm.runInNewContext(code, sandbox);
  end:
else:
  print("Invalid file name '" + locate + "'")
  print("Use the " + extensions.primary + ", " + extensions.secondary + ", or " + extensions.module + " extension")
end: